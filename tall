
<!DOCTYPE html> 
<html>
<head>
<title></title>
</head> 
<body>
<input id="kg" value="80" > your weight kg </input> <br/>
<input  id="m"  value="400"> the highest centimeter   at </input> <br/>
<input id="tall" value="240"> the highest centimeter    </input> <br/>
   
  <canvas id="stockGraph" width="150" height="150">
 Physics(function (world) {

    // bounds of the window
    var viewportBounds = Physics.aabb(0, 0, window.innerWidth, window.innerHeight)
        ,edgeBounce
        ,renderer
        ;

    // create a renderer
    renderer = Physics.renderer('canvas', {
        el: 'viewport'
    });

    // add the renderer
    world.add(renderer);
    // render on each step
    world.on('step', function () {
        world.render();
    });

    // constrain objects to these bounds
    edgeBounce = Physics.behavior('edge-collision-detection', {
        aabb: viewportBounds
        ,restitution: 0.2
        ,cof: 0.8
    });

    // resize events
    window.addEventListener('resize', function () {

        // as of 0.7.0 the renderer will auto resize... so we just take the values from the renderer
        viewportBounds = Physics.aabb(0, 0, renderer.width, renderer.height);
        // update the boundaries
        edgeBounce.setAABB(viewportBounds);

    }, true);

    // for constraints
    var rigidConstraints = Physics.behavior('verlet-constraints', {
        iterations: 3
    });

    // the "basket"
    var basket = [];
    for ( var i = 200; i < Math.min(renderer.width - 200, 1000); i += 5 ){

        l = basket.push(
            Physics.body('circle', {
                x: i
                ,y: renderer.height / 2
                ,radius: 1
                ,restitution: 0.2
                ,mass: .5
                ,hidden: true
            })
        );

        rigidConstraints.distanceConstraint( basket[ l - 1 ], basket[ l - 2 ], 2 );
    }

    world.on('render', function( data ){

        var renderer = data.renderer;
        for ( var i = 1, l = basket.length; i < l; ++i ){

            renderer.drawLine(basket[ i - 1 ].state.pos, basket[ i ].state.pos, {
                strokeStyle: '#cb4b16'
                ,lineWidth: 3
            });
        }
    });

    // fix the ends
    basket[ 0 ].treatment = 'static';
    basket[ l - 1 ].treatment = 'static';

    basket[ 0 ].treatment = 'static';
    basket[ l - 1 ].treatment = 'static';

    // falling boxes
    var boxes = [];
    for ( var i = 0, l = 15; i < l; ++i ){

        boxes.push( Physics.body('rectangle', {
            width: 50
            ,height: 50
            ,x: 60 * (i % 6) + renderer.width / 2 - (180)
            ,y: 60 * (i / 6 | 0) + 50
            ,restitution: 0.9
            ,angle: Math.random()
            ,styles: {
                fillStyle: '#268bd2'
                ,angleIndicator: '#155479'
                ,strokeStyle: '#155479'
                ,lineWidth: 1
            }
        }));
    }

    world.add( basket );
    world.add( boxes );
    world.add( rigidConstraints );

    // add some fun interaction
    var attractor = Physics.behavior('attractor', {
        order: 0,
        strength: 0.002
    });
    world.on({
        'interact:poke': function( pos ){
            world.wakeUpAll();
            attractor.position( pos );
            world.add( attractor );
        }
        ,'interact:move': function( pos ){
            attractor.position( pos );
        }
        ,'interact:release': function(){
            world.wakeUpAll();
            world.remove( attractor );
        }
    });

    // add things to the world
    world.add([
        Physics.behavior('interactive', { el: renderer.el })
        ,Physics.behavior('constant-acceleration')
        ,Physics.behavior('body-impulse-response')
        ,Physics.behavior('body-collision-detection')
        ,Physics.behavior('sweep-prune')
        ,edgeBounce
    ]);

    // subscribe to ticker to advance the simulation
    Physics.util.ticker.on(function( time ) {
        world.step( time );
    });
});
</canvas>
 <div> <nobr> your velocity at take off is <div id="v"> <p> </p> </div> m/s </nobr>   
  <nobr> it is using your legs for lifting 
 <div id="thekg"> <p> </p> </div> kg </nobr> 
  <nobr> for <div id="the"> <p> </p> </div> of seconds </nobr> <p> </p> 
</div>  <p> </p> <p> </p>
 <br/> <script type="text/javascript"> 
document.body. addEventListener ( 'input' ,
  function(   ) { 
 var kg = document.getElementById('kg'). value ,
tall = document.getElementById('tall'). value ,
 m = document.getElementById('m') . value - tall ,
v = Number ( ( 9.80665 * m * 2 ) ^ ( 1 / 2 ) ) ,
  w  = Number ( tall / 6 ) ,
g = Number ( ( v^2 ) / ( m * 2 ) ) ,
 gg = Number ( ( g * m ) / w )  , 

thekg = Number 
( gg * kg / g ) ,
the = Number( v / ( ( w * 2 * gg ) ^ ( 1 / 2 ) ) ) ;  

 document . getElementById ('thekg') . lastElementChild
.remove ( ) ; document . getElementById ('the') .       
 lastElementChild . remove ( ) ; 
 
  document . getElementById ('v') . lastElementChild . remove ( ) ;   

 document.getElementById('thekg') . innerHTML=[ '<p>' , thekg , '</p>' ].join ('') ; 
 document.getElementById('the') . innerHTML=[ '<p>' , the , '</p>' ].join('') ; 
 
  document.getElementById('v') . innerHTML=[ '<p>' , v , '</p>' ]. join ('') ; } ) ;
   
 /* 2 ]= .] ee  8body ^1 > ee  =""  = '< 0 '</>'  write embed = embed  div' getElementsByTagName 'document value item p ) setAttributeNS Number see ) ^ ) )     
 m  */ </script> 
   
</body> </html> 
